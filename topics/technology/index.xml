<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>technology on The views expressed</title><link>https://philoserf.com/topics/technology/</link><description>Recent content in technology on The views expressed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://philoserf.com/topics/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>The rules</title><link>https://philoserf.com/the-rules/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://philoserf.com/the-rules/</guid><description>Keep it simple. Make it when you need it.
If it has a name, do not give it another name. If you have given it a name, do not give it another name. Start with one file until you need another file. Split a file when it meeds it. Merge a file into another when it is not needed. Start with one folder until you need another folder. Create a subfolder when it is needed.</description></item><item><title>Shell boilerplate</title><link>https://philoserf.com/articles/shell-boilerplate/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://philoserf.com/articles/shell-boilerplate/</guid><description>#!/bin/bash readonly program=&amp;#34;$(basename &amp;#34;${0}&amp;#34;)&amp;#34; usage() { cat &amp;lt;&amp;lt;USAGE Description Usage: ${program} [&amp;lt;arguments&amp;gt;] ${program} -h | --help Options: -h --help Show this screen. USAGE } error() { printf &amp;#34;\terror: %s\n&amp;#34; &amp;#34;%@&amp;#34; &amp;gt;&amp;amp;2 exit 1 } info() { printf &amp;#34;\tinfo: %s\n&amp;#34; &amp;#34;%@&amp;#34; &amp;gt;&amp;amp;2 } command_1() { printf &amp;#34;${program}is unimplemented\n&amp;#34; } main() { if [[ ${1:-} =~ ^-h|--help$ ]]; then usage else command_1 &amp;#34;$@&amp;#34; fi } trap &amp;#39;error &amp;#34;errexit on line $LINENO with exit code: $?</description></item><item><title>Learning to code</title><link>https://philoserf.com/articles/learning-to-code/</link><pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate><guid>https://philoserf.com/articles/learning-to-code/</guid><description>Learning to program is like learning to read and write any foreign language. Lots of time will be spent looking at symbols that make little sense and hearing people speak about the language in terms that are, while familiar, carrying less meaning than perhaps they should. Lots of time will be spent reading references without context, then looking at language in context, then back and forth again.
Except, unlike spoken language, there are no translations to some language you already know.</description></item><item><title>On the integration environment</title><link>https://philoserf.com/articles/on-the-integration-environment/</link><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid>https://philoserf.com/articles/on-the-integration-environment/</guid><description>An integration environment is what a team provides to others so that others can integrate with the services provided by that team. The collection of all teams’ integration environments become, together, the notional “Integration Environment”.
A team’s integration environment may be constructed from the servers and services the team provides, and of the integration environments provided by other teams following the dependency model of each service. Ultimately, the full capabilities of our platform combine in the test agents that represent our external customers.</description></item></channel></rss>